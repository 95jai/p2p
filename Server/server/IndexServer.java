
package server;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.html.HTML;

import utility.PeerQueue;

public class IndexServer extends javax.swing.JFrame {

    public static LinkedList<String> fileNameList = new LinkedList<>();
    static IndexServer gui;
    public IndexServer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        startServer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setLineWrap(true);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        startServer.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.shadow"));
        startServer.setFont(new java.awt.Font("Arial", 2, 18)); // NOI18N
        startServer.setText("START");
        startServer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startServerMouseClicked(evt);
            }
        });
        startServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startServerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(startServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(startServer, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startServerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_startServerActionPerformed

    private void startServerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startServerMouseClicked

        new Thread(){
            public void run(){
               
                    initial();
               
            }
        }.start();
        
    }//GEN-LAST:event_startServerMouseClicked

    /**
     * @param arigs the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IndexServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IndexServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IndexServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IndexServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                gui=new IndexServer();
                gui.setVisible(true);
            }
        });
    }
    public static IndexServer getGUI(){
        return gui;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JButton startServer;
    public static javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables


    public void appendText(String str)
    {
        textArea.append(str);
    }


    private static  Hashtable<String,ArrayList<Peer>> index; //fileName->all the peers having this file
    private static int port=6666;
    private static int numOfThread=6;
    private static PeerQueue<Socket> pQueue;
    
    IndexServer is;
    public static Hashtable<String,ArrayList<Peer>> getIndex()
    {
        return index;
    }
    private  void server() throws IOException
    {
        @SuppressWarnings("resource")
        ServerSocket serverSocket=new ServerSocket(port);
        //System.out.println(serverSocket);
        textArea.append(serverSocket.toString()+"\n");
        textArea.append("Waiting for peers to connect....\n");
        while(true)
        {
            //System.out.println("Waiting for peers to connect..");
            
            Socket socket=serverSocket.accept();
            synchronized(pQueue){
            pQueue.add(socket);
        }
        }
    }
    private  void income()throws IOException, InterruptedException
    {
        ExecutorService executor=Executors.newFixedThreadPool(numOfThread);
        while(true)
        {
            Thread.sleep(1);
            if(pQueue.peek()==null)
                continue;
            synchronized(pQueue)
            {
                Socket socket=pQueue.poll();
                Server s =new Server(socket);   //Object of Server class
                executor.execute(s);
            }
        }
    }
    public static  void registry(int peerId,int numFiles,ArrayList<String> fileName,String directory,String address,int port)
    {
        for(String fn: fileName)
        {
            if(index.containsKey(fn))
            {
                index.get(fn).add(new Peer(peerId,numFiles,fileName,directory,address,port));
                //If file is already present in hashtable..map the new peer object with this file name
            }
            else    //If file name is not in the hashtable
            {
                fileNameList.add(fn);
                index.put(fn,new ArrayList<Peer>());//put the file name and allocate space for arraylist of objects of peers
                index.get(fn).add(new Peer(peerId,numFiles,fileName,directory,address,port));
                //Now map the file name with the peer object
            }
        }
    }
    public  void initial()
    {
        index = new Hashtable<String,ArrayList<Peer>>();
        Thread serverThread,incomeThread;
        pQueue=new PeerQueue<Socket>(); //Holds linked list of sockets
//         if(args.length>0)
//         {
//             try{
//             port=Integer.parseInt(args[1]);
//             }
//             catch(Exception e)
//             {
//                 System.out.println("Put a valid port number");
//             }
//             
//         }
        serverThread = new Thread(){
            public void run()
            {
                try{
                    server();
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
            }
        };
        serverThread.start();
        incomeThread=new Thread(){
            public void run()
            {
                try{
                    income();
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }
            }
        };
        incomeThread.start();
        
                
    }
    
}